      // I Have called the onSuccess and onFailure functions based on try catch for demo purpose
      // But we call them based on status code later
      // I hope you like the code pattern
      class helperClass {
        constructor(url) {
          this.baseUrl = "https://dev.rest.travertex.com/api/v1";
        }
        async getAuthToken(params, onSuccess, onFailure) {
          try {
            const response = await fetch(`${this.baseUrl}/access/GetAuthToken.json`, {
              method: "POST",
              body: JSON.stringify(params),
            });
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }

        async createUser(accessToken, params, onSuccess, onFailure) {
          try {
            const response = await fetch(`${this.baseUrl}/booking/UserCreate.json`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${accessToken}`,
              },
              body: JSON.stringify(params),
            });
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }
        async addAccount(accessToken, params, onSuccess, onFailure) {
          try {
            const response = await fetch(`${this.baseUrl}/booking/AddAccount.json`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${accessToken}`,
              },
              body: JSON.stringify(params),
            });
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }

        async login(accessToken, params, onSuccess, onFailure) {
          try {
            const response = await fetch(`${this.baseUrl}/booking/Login.json`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${accessToken}`,
              },
              body: JSON.stringify(params),
            });
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }
        async userCheck(accessToken, params, onSuccess, onFailure) {
          try {
            const response = await fetch(`${this.baseUrl}/booking/UserCheck.json`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${accessToken}`,
              },
              body: JSON.stringify(params),
            });
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }

        async userDeactivate(accessToken, params, onSuccess, onFailure) {
          try {
            const response = await fetch(
              `${this.baseUrl}/booking/UserDeactivate.json`,
              {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${accessToken}`,
                },
                body: JSON.stringify(params),
              }
            );
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }
        async userReactivate(accessToken, params, onSuccess, onFailure) {
          try {
            const response = await fetch(
              `${this.baseUrl}/booking/UserReactivate.json`,
              {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${accessToken}`,
                },
                body: JSON.stringify(params),
              }
            );
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }

        async userTransfer(accessToken, params, onSuccess, onFailure) {
          try {
            const response = await fetch(
              `${this.baseUrl}/booking/UserTransfer.json`,
              {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${accessToken}`,
                },
                body: JSON.stringify(params),
              }
            );
            const content = await response.json();
            onSuccess(content);
          } catch (error) {
            onFailure(error);
          }
        }
      }
